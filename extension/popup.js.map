{"version":3,"sources":["src/utils.ts","src/app.ts","popup.js"],"names":[],"mappings":";AAAA,aAGA,SAAgB,EAAS,EAAiB,GAC/B,OAAA,EAAW,OAChB,SAAC,EAAoB,EAAM,GACnB,IAAA,EAAa,KAAK,MAAM,EAAQ,GAQ/B,OANF,EAAY,KACf,EAAY,GAAc,IAG5B,EAAY,GAAY,KAAK,GAEtB,GAET,IAIN,SAAgB,EAAa,EAAa,GAG/B,OAFP,EAAM,KAAK,KAAK,GAChB,EAAM,KAAK,MAAM,GACV,KAAK,MAAM,KAAK,UAAY,EAAM,IAAQ,EAGrD,SAAgB,IACL,OAAA,IAAI,QAAgB,SAAC,GAC1B,OAAO,KAAK,YAAY,SAAC,GACvB,EAAI,EAAI,SAHhB,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,QAAA,aAAA,QAAA,WAAA,EAvBA,QAAA,MAAA,EAiBA,QAAA,aAAA,EAMA,QAAA,iBAAA;;AC8CA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EAvEA,IAAA,EAAA,QAAA,WACM,EAAM,mBACN,EAAW,CACf,OAAQ,SAAC,GACH,GAAA,EAAS,GAAK,EAAS,GACf,MAAA,GAAA,OAAA,EAAa,WAAA,OAAA,EAAvB,SAEI,MAAA,IAAI,MAAsD,gDAAA,OAAA,KAElE,OAAW,GAAA,OAAA,EAAL,iBAGR,SAAS,IACD,IAAA,EAAe,EAAA,aAAa,EAAG,GAC9B,OAAA,MAAM,EAAS,OAAO,IAC1B,KAAK,SAAA,GAAY,OAAA,EAAS,SAG/B,SAAS,IACP,IAGF,SAAS,IACP,IAAkB,KAAK,SAAA,GACrB,EAAc,IAAqB,KAMvC,SAAS,EAAc,EAAoB,GAChC,SAAA,EAAY,GAGc,MAAA,6DAAA,OAAA,EAAM,SAFvC,qBAYI,IAAA,EAAO,EAAA,MAAM,EAAQ,GACxB,IARM,SAAa,GAGhB,MAAA,uCAAA,OAAA,EAAO,IAAI,GAAa,OAAO,SAAC,EAAQ,GAAO,OAAA,EAAS,GAAI,IAFhE,uBAQC,IAAI,SAAA,GAA+C,MAAA,kCAAA,OAAA,EAAtC,YACb,OAAO,SAAC,EAAQ,GAAO,OAAA,EAAS,GAAI,IACvC,EAAU,UAAY,EAGxB,SAAS,IACA,OAAA,SAAS,cAAc,YAGhC,SAAS,EAAyB,GACf,MAAA,UAAA,OAAA,EAAjB,WAGF,SAAS,EAAwB,GAC/B,EAAA,mBAAmB,KAAK,SAAA,GACf,OAAA,EAAI,SAAS,sBAAwB,EAAyB,GAAY,IAElF,KAAK,SAAA,GAAQ,OAAA,UAAU,UAAU,UAAU,KAC3C,KAAK,WACJ,QAAQ,IAAI,wBACX,SAAC,GACF,QAAQ,IAAI,iBAAkB,KAIlC,SAAgB,IAAhB,IAAA,EAC6C,QAA3C,EAAA,SAAS,cAAc,4BAAoB,IAAA,GAAA,EAAE,iBAAiB,QAAS,GACvE,SAAS,iBAAiB,QAAS,SAAC,GAC/B,IAAA,MAAA,OAAK,EAAL,EAAO,kBAAkB,SAAmD,cAAxC,MAAA,OAAK,EAAL,EAAO,OAAO,aAAa,UAAyB,CACjF,IAAA,EAAW,EAAM,OAAO,aAAa,OACvC,GACA,EAAwB,MAIlC,IAVF,QAAA,MAAA;;ACtEA,aAFA,IAAA,EAAA,QAAA,cAEA,EAAA,EAAA","file":"popup.js","sourceRoot":"..","sourcesContent":["// Helpers\n\n\nexport function chunk<T>(inputArray: T[], perChunk: number):T[][] {\n    return inputArray.reduce(\n      (resultArray: T[][], item, index) => {\n        const chunkIndex = Math.floor(index / perChunk)\n  \n        if (!resultArray[chunkIndex]) {\n          resultArray[chunkIndex] = [] // start a new chunk\n        }\n  \n        resultArray[chunkIndex].push(item)\n  \n        return resultArray\n      },\n      []\n    )\n}\n  \nexport function getRandomInt(min: number, max: number) {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min)) + min //The maximum is exclusive and the minimum is inclusive\n  }\n  \nexport function getCurrentTabUrl() {\n    return new Promise<string>((res) => {\n      chrome.tabs.getSelected((tab: any) => {  \n        res(tab.url)\n      });\n    })\n  }","\nimport {getCurrentTabUrl, getRandomInt, chunk} from \"./utils\";\nconst url = \"https://lgtm.fun\"\nconst endpoint = {\n  random: (number: number) => {\n    if (number > 0 && number < 10) {\n      return `${url}/random${number}.json`\n    }\n    throw new Error(`invalid random number must be 0 > number 10, ${number}`)\n  },\n  latest: `${url}/latest.json`\n}\n\nfunction getRandomImages() {\n  const randomNumber = getRandomInt(1, 9)\n  return fetch(endpoint.random(randomNumber))\n    .then(response => response.json())\n}\n\nfunction onClickMoreLoadButton() {\n  showRandomImages()\n}\n\nfunction showRandomImages() {\n  getRandomImages().then(images => {\n    renderContent(getContentRootDom(), images)\n  })\n}\n\ntype Image = any\n\nfunction renderContent(targetDom: Element, images: any) {\n  function renderImage(image: Image): string {\n    return (\n      `<li class=\"image-li\">\n        <img class=\"lgtm-img\" src=\"${image.imageurl}\" />\n      </li>`)\n  }\n  function renderImages(images: Image[]): string {\n    return `\n    <ul class=\"images-ul\">\n      ${images.map(renderImage).reduce((result, li) => result + li, \"\")}\n    </ul>\n    `\n  }\n  const html = chunk(images, 5)\n    .map(renderImages)\n    .map(imageHtml => `<div class=\"images-ul-wrapper\">${imageHtml}</div>`)\n    .reduce((result, li) => result + li, \"\")\n  targetDom.innerHTML = html\n}\n\nfunction getContentRootDom() : Element{\n  return document.querySelector(\"#content\")!\n}\n\nfunction imageURLToMarkdownFormat(url: string) {\n  return `![img](${url} \"img\")`\n}\n\nfunction imageUrlCopyToClipboard(imageUrl: string) {\n  getCurrentTabUrl().then(url => {\n    return url.includes(\"https://github.com\") ? imageURLToMarkdownFormat(imageUrl) : imageUrl\n  })\n  .then(text => navigator.clipboard.writeText(text))\n  .then(() => {\n    console.log('copied to clipboard');\n  }, (e) => {\n    console.log('failed to copy', e);\n  });\n}\n\nexport function start() {\n  document.querySelector(\".more-load-button\")?.addEventListener('click', onClickMoreLoadButton)\n  document.addEventListener(\"click\", (event) => {\n    if(event?.target instanceof Element && event?.target.getAttribute('class') === \"lgtm-img\") {\n        const imageUrl = event.target.getAttribute('src')\n        if (imageUrl) {\n            imageUrlCopyToClipboard(imageUrl)\n      }\n    }\n  })\n  showRandomImages()\n}","import {start} from \"./src/app\"\n\nstart();"]}